{
    "unused"        : true,       // Warns when you define and never use your variables
    "predef"        : [ "describe", "it", "before", "after", "beforeEach", "afterEach" ],
    "node"          : true,       // Defines globals available when running inside of the Node runtime environment
    "maxlen"        : 120,        // The maximum length of a line.
    "maxdepth"      : 3,          // This option lets you control how nested do you want your blocks to be
    "maxstatements" : 10,         // The max number of statements allowed per function
    "maxparams"     : 5,          // The max number of formal parameters allowed per function
    "maxcomplexity" : 3,          // The max cyclomatic complexity of code

    // Development.s
    "debug"         : false,      // Allow debugger statements e.g. browser breakpoints.
    "devel"         : true,       // Allow developments statements e.g. `console.log();`.

    // ECMAScript 5.
    "strict"        : true,       // Require `use strict` pragma  in every file.
    "globalstrict"  : true,       // Allow global "use strict" (also enables 'strict').

    // The Good Parts.
    "asi"           : false,      // Tolerate Automatic Semicolon Insertion (no semicolons).
    "laxbreak"      : false,      // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
    "bitwise"       : true,       // Prohibit bitwise operators (&, |, ^, etc.).
    "boss"          : false,      // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "curly"         : true,       // Require {} for every new block or scope.
    "eqeqeq"        : true,       // Require triple equals i.e. `===`.
    "eqnull"        : false,      // Tolerate use of `== null`.
    "evil"          : false,      // Tolerate use of `eval`.
    "expr"          : false,      // Tolerate `ExpressionStatement` as Programs.
    "forin"         : false,      // Tolerate `for in` loops without `hasOwnPrototype`.
    "immed"         : true,       // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    "latedef"       : false,      // Prohipit variable use before definition.
    "loopfunc"      : false,      // Allow functions to be defined within loops.
    "noarg"         : true,       // Prohibit use of `arguments.caller` and `arguments.callee`.
    "regexp"        : true,       // Prohibit `.` and `[^...]` in regular expressions.
    "regexdash"     : false,      // Tolerate unescaped last dash i.e. `[-...]`.
    "scripturl"     : true,       // Tolerate script-targeted URLs.
    "shadow"        : false,      // Allows re-define variables later in code e.g. `var x=1; x=2;`.
    "supernew"      : false,      // Tolerate `new function () { ... };` and `new Object;`.
    "undef"         : true,       // Require all non-global variables be declared before they are used.
    "freeze"        : true,       // Prohibits overwriting prototypes of native objects such as Array, Date and so on

    // Personal styling preferences.
    "newcap"        : true,       // Require capitalization of all constructor functions e.g. `new F()`.
    "noempty"       : true,       // Prohibit use of empty blocks.
    "nonew"         : true,       // Prohibit use of constructors for side-effects.
    "nomen"         : true,       // Prohibit use of initial or trailing underbars in names.
    "onevar"        : false,      // Allow only one `var` statement per function.
    "plusplus"      : false,      // Prohibit use of `++` & `--`.
    "sub"           : false,      // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "trailing"      : true,       // Prohibit trailing whitespaces.
    "white"         : false,      // Check against strict whitespace and indentation rules.
    "indent"        : 4,          // Specify indentation spacing
    "quotmark"      : "double"    // Some consistency for quotemarks: allow only one style per file
}
